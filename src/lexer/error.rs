
use crate::lexer::{constants::Pos, /* token::token::TokenKind */};
use std::fmt;

/// An Error generated by the Lexer
#[derive(Debug, Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
pub(crate) struct Error {
    pub(crate) kind: ErrorKind,
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {

    }
}

impl std::error::Error for Error {

}
#[derive(Debug, Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
pub(crate) enum ErrorKind {
    /// Invalid sequence while parsing Eg. an integer.
    InvalidSequence { pos: Pos /* [line, colum, char] */ },
    /// An invalid character wich doesn't match to any token.
    InvalidChar { chr: char, pos: Pos /* [line, colum, char] */ },
}
